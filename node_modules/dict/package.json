{
  "_args": [
    [
      {
        "raw": "dict@^1.4.0",
        "scope": null,
        "escapedName": "dict",
        "name": "dict",
        "rawSpec": "^1.4.0",
        "spec": ">=1.4.0 <2.0.0",
        "type": "range"
      },
      "/Users/chrapchp/Dev/nodes/HomeSensors"
    ]
  ],
  "_from": "dict@>=1.4.0 <2.0.0",
  "_id": "dict@1.4.0",
  "_inCache": true,
  "_location": "/dict",
  "_npmUser": {
    "name": "domenic",
    "email": "domenic@domenicdenicola.com"
  },
  "_npmVersion": "1.2.17",
  "_phantomChildren": {},
  "_requested": {
    "raw": "dict@^1.4.0",
    "scope": null,
    "escapedName": "dict",
    "name": "dict",
    "rawSpec": "^1.4.0",
    "spec": ">=1.4.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/dict/-/dict-1.4.0.tgz",
  "_shasum": "83d87d57cf0c4ac0d834608448b10a6e23bbfea0",
  "_shrinkwrap": null,
  "_spec": "dict@^1.4.0",
  "_where": "/Users/chrapchp/Dev/nodes/HomeSensors",
  "author": {
    "name": "Domenic Denicola",
    "email": "domenic@domenicdenicola.com",
    "url": "http://domenicdenicola.com"
  },
  "bugs": {
    "url": "https://github.com/domenic/dict/issues"
  },
  "dependencies": {},
  "description": "A lightweight but safe dictionary, for when Object won't cut it",
  "devDependencies": {
    "chai": "~1.6",
    "coffee-script": "~1.6.2",
    "jshint": "~1.1",
    "mocha": "~1.9.0",
    "sinon": "~1.6",
    "sinon-chai": "~2.4"
  },
  "directories": {},
  "dist": {
    "shasum": "83d87d57cf0c4ac0d834608448b10a6e23bbfea0",
    "tarball": "https://registry.npmjs.org/dict/-/dict-1.4.0.tgz"
  },
  "homepage": "https://github.com/domenic/dict#readme",
  "keywords": [
    "dict",
    "dictionary",
    "map",
    "string map",
    "hash"
  ],
  "license": "WTFPL",
  "main": "./dict.js",
  "maintainers": [
    {
      "name": "domenic",
      "email": "domenic@domenicdenicola.com"
    }
  ],
  "name": "dict",
  "optionalDependencies": {},
  "readme": "# An Easy But Safe String-Keyed Store\n\nDon't stuff things into objects. Use a Dict instead.\n\n## The Problem\n\nYou're probably used to stuffing things into objects:\n\n```js\nvar hash = {};\n\nhash[\"foo\"] = \"bar\";\n\nconsole.log(\"foo\" in hash ? hash[\"foo\"] : \"not there\"); // \"bar\"\n```\n\nHowever this doesn't always work, because your naïve hashes inherit from\n[`Object.prototype`][1]:\n\n```js\nvar hash = {};\n\nconsole.log(\"hasOwnProperty\" in hash); // true!\n```\n\nEven worse, the magic `__proto__` property can really [ruin your day][2]:\n\n```js\nvar hash = {};\nvar anotherObject = { foo: \"bar\" };\n\nhash[\"__proto__\"] = anotherObject;\n\nconsole.log(\"foo\" in hash);       // true!!\nconsole.log(\"__proto__\" in hash); // false!!!\n```\n\nUsually you're smart enough to avoid silly key names like `\"hasOwnProperty\"`, `\"__proto__\"`, and all the rest. But\nsometimes you want to store user input in your hashes. Uh-oh…\n\n## Dict Is the Solution\n\nJust do an `npm install dict --save` and you're ready to use this nice-looking API:\n\n```js\nvar dict = require(\"dict\");\n\nvar d = dict({\n    IV: \"A New Hope\",\n    V: \"The Empire Strikes Back\",\n    VI: \"Return of the Jedi\"\n});\n\nd.has(\"IV\");                      // true\nd.get(\"V\");                       // \"The Empire Strikes Back\"\nd.size;                           // 3\n\nd.has(\"I\");                       // false\nd.set(\"I\", \"The Phantom Menace\"); // \"The Phantom Menace\"\nd.get(\"I\");                       // \"The Phantom Menace\"\nd.delete(\"I\");                    // true\nd.get(\"I\");                       // undefined\nd.get(\"I\", \"Jar-Jar's Fun Time\"); // \"Jar-Jar's Fun Time\"\n\nd.forEach(function (value, key) {\n   console.log(\"Star Wars Episode \" + key + \": \" + value);\n});\n\nd.clear();\nd.size;                           // 0\n```\n\nAnd of course, Dict prides itself in being bulletproof against all that nastiness we talked about earlier:\n\n```javascript\nvar d = dict();\n\nd.set(\"foo\", \"bar\");\nconsole.log(d.get(\"foo\", \"not there\")); // \"bar\"\n\nconsole.log(d.has(\"hasOwnProperty\"));   // false\n\nvar anotherObject = { baz: \"qux\" };\nd.set(\"__proto__\", anotherObject);\nconsole.log(d.has(\"baz\"));              // false\nconsole.log(d.has(\"__proto__\"));        // true\n```\n\n## Featuring\n\n* A lightweight [ES6-inspired][3] API:\n  - `get`, `set`, `has` and `delete` basic operations.\n  - A `size` property and `forEach` method for introspection.\n  - A `clear` method for clearing out all keys and values.\n* `get` accepts a second argument as a fallback for if the key isn't present (like [Mozilla's `WeakMap`][4]).\n* `set` returns the value set, just like assignment to an object would.\n* Doesn't let you get away with being dumb: if you pass a non-string as a key, you're going to get a `TypeError`.\n\n## See Also\n\n* [rauschma/strmap][7] for something a bit more full-featured (albeit exposing its internals everywhere, if you care\n  about that).\n* [dherman/dictjs][8] if you live in an ES6 world.\n* [es-lab's StringMap.js][9] if you can deal with the lack of npm support.\n* [es6-shim][10]'s `Map` if you want more than just strings for your keys.\n* `Object.create(null)` if you don't have to deal with V8 or JavaScriptCore, for which\n  `\"__proto__\" in Object.create(null)` is still true.\n\n\n[1]:  https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/prototype\n[2]:  http://www.google.com/support/forum/p/Google+Docs/thread?tid=0cd4a00bd4aef9e4\n[3]:  http://people.mozilla.org/~jorendorff/es6-draft.html#sec-15.14.4\n[4]:  https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/WeakMap\n[5]:  http://visionmedia.github.com/mocha/\n[6]:  http://chaijs.com/\n[7]:  https://github.com/rauschma/strmap\n[8]:  https://github.com/dherman/dictjs\n[9]:  http://code.google.com/p/es-lab/source/browse/trunk/src/ses/StringMap.js\n[10]: https://github.com/paulmillr/es6-shim\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/domenic/dict.git"
  },
  "scripts": {
    "lint": "jshint dict.js",
    "test": "mocha"
  },
  "version": "1.4.0"
}
